#
# ctax configuration file
#

# the tax currency - all cost / revenue / profit items will be converted to and listed in tax currency
#
tax-currency: 'EUR'

# the tax year - only trades from this year will be included in the calculations
#
tax-year: 2017

# which application step to start (useful to skip steps)
#
# the following steps are performed by the application (in this order):
#
# 1: query orders / trades / transactions (from configured exchange APIs) and persist them in the DB
# 2: find exchange rate for each transaction (from configured exchange rate files / exchange rate APIs) and persists them in the DB
# 3: calculate profit / loss
#
start-step: 3

# import of trades from files (csv)
#
files:

  - exchange: 'bitfinex'
    files: [
      'Bitfinex Trades Q1 2017.csv',
      'Bitfinex Trades Q2 2017.csv',
      'Bitfinex Trades Q3 2017.csv',
      'Bitfinex Trades Q4 2017.csv'
    ]
    delimiter: ','
    quotechar: '"'
    encoding: 'utf8'
    currency-map: { }
    columns:
      id:
        name: '#'
      date:
        name: 'Date'
      base-currency:
        name: 'Pair'
        regex: '^(.*)\/.*$'
      quote-currency:
        name: 'Pair'
        regex: '^.*\/(.*)$'
      fee-currency:
        name: 'FeeCurrency'
        regex: '^(.*)$'
      base:
        name: 'Amount'
      price:
        name: 'Price'
      fee:
        name: 'Fee'
      sell-indicator:
        name: 'Amount'
        regex: '^(-).*$'

  - exchange: 'kraken'
    files: ['Kraken Trades 2017.csv']
    delimiter: ','
    quotechar: '"'
    encoding: 'utf8'
    currency-map: { 'XXBT': 'BTC', 'XETH': 'ETH', 'ZUSD': 'USD', 'ZEUR': 'EUR' }
    columns:
      id:
        name: 'txid'
      date:
        name: 'time'
      base-currency:
        name: 'pair'
        regex: '^(.{4}).{4}$'
      quote-currency:
        name: 'pair'
        regex: '^.{4}(.{4})$'
      fee-currency:
        name: 'pair'
        regex: '^.{4}(.{4})$'
      base:
        name: 'vol'
      price:
        name: 'price'
      fee:
        name: 'fee'
      sell-indicator:
        name: 'type'
        regex: '^(sell)$'

# import of exchange rates from files (csv)
#
# - each subsection configures one file to import
# - the sample file included shows the required structure
# - files are read in the order listed here
# - if there are two values for exactly the same currency pair and time, the more recently imported value will replace the previous one
#
exchange-rate-files:

  - id: 'ecb-EUR'
    description: 'ECB foreign exchange reference rates (https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html)'
    file: 'exchange-rates-EUR.csv'
    base-currency: 'EUR'
    delimiter: ','
    quotechar: '"'
    encoding: 'utf8'
    empty-marker: 'N/A'

# exchanges to query
#
# - currently only orders / trades / transactions  (transaction types BUY, SELL, FEE) will be queried
#   (no deposits, withdrawals, funding)
# - each subsection configures one exchange to query
# - subsection name must be a valid exchange id
# - see https://github.com/ccxt/ccxt/wiki/Manual#exchanges for a list of exchange ids
#
exchanges:

  bitfinex:

    # api key
    key: ''

    # api secret
    secret: ''

    # (optional) some exchanges require a list of market symbols to query
    # and will complain otherwise ('no market symbol')
    symbols: ['BTC/EUR', 'BTC/USDT', 'ETH/USDT', 'ETH/EUR', 'ETH/BTC', 'OMG/ETH', 'XRP/USDT']

  kraken:

    # api key
    key: ''

    # api secret
    secret: ''

# whether to query currency exchange rates from cryptocompare.com, ratesapi.io
#
query-exchange-rate-apis: True

# logging configuration
#
logging:

  filename: 'log.txt'
  level-file: 'DEBUG'
  level-console: 'INFO'

# DB configuration
#
database:
  url: 'sqlite:///database.sqlite'

# how long to wait (seconds) before retry query in case of network error
#
retry-interval: 30
